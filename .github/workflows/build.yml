name: Build ASMT

on:
  workflow_dispatch:
        
jobs:
  buils_x86_64_debian:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: [ 'debian:10', 'debian:11', 'debian-12' ]
    container:
      image: ${{ matrix.container }}
      options: "--entrypoint /bin/bash"

    steps:

    - name: Install Dependencies (centos:7)
      run: |
        sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* && sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        yum upgrade -y
        yum install -y dnf-plugins-core
        yum-config-manager --enable powertools
        yum install -y make gcc zlib-devel zlib-static git rpm-build
      if: matrix.container == 'centos:7'

    - name: Install Dependencies (centos:8)
      run: |
        yum upgrade -y
        yum install -y dnf-plugins-core
        yum config-manager --set-enable powertools
        yum install -y make gcc zlib-devel zlib-static git rpm-build
      if: matrix.container == 'centos:8'

    - name: Install Dependencies (Debian)
      run: |
        apt-get -y update
        apt-get -y install make gcc libc6-dev zlib1g-dev git build-essential
      if: |
        matrix.container == 'debian:10' || matrix.container == 'debian:11' || matrix.container == 'debian:12'

    - name: Clone Source
      run: git clone https://github.com/aerospike/asmt.git

    - name: buils asmt (centos)
      working-directory: ./asmt
      if: matrix.container == 'centos:7' || matrix.container == 'centos:8'
      run: |
        echo "REV=$(make -f pkg/Makefile.rpm print-REV)" >> $GITHUB_ENV
        echo "OS=$(make -f pkg/Makefile.rpm print-OS)" >> $GITHUB_ENV
        echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
        echo "ARCH=$(make -f pkg/Makefile.rpm print-ARCH)" >> $GITHUB_ENV
        make all rpm

    - name: build asmt (debian)
      working-directory: ./asmt
      if: |
        matrix.container == 'debian:10' || matrix.container == 'debian:11' 
      run: |
        echo "REV=$(make -f pkg/Makefile.deb print-REV)" >> $GITHUB_ENV
        echo "OS=$(make -f pkg/Makefile.deb print-OS)" >> $GITHUB_ENV
        echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
        echo "ARCH=$(make -f pkg/Makefile.deb print-ARCH)" >> $GITHUB_ENV
        make all deb      

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3.1.1
      with:
        name: asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
        path: /__w/asmt/asmt/asmt/target/packages/asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
        if-no-files-found: error

  build_x86_64_ubuntu:
    strategy:
      matrix:
        os: [ 'ubuntu-20.04', 'ubuntu-18.04' ]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Install Dependencies
      run: sudo apt-get install make gcc libc6-dev zlib1g-dev
      if: matrix.os == 'ubuntu-20.04'

    - name: Get Sources
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set env
      run: |
        echo "REV=$(make -f pkg/Makefile.deb print-REV)" >> $GITHUB_ENV
        echo "OS=$(make -f pkg/Makefile.deb print-OS)" >> $GITHUB_ENV
        echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
        echo "ARCH=$(make -f pkg/Makefile.deb print-ARCH)" >> $GITHUB_ENV
        ls -la

    - name: build
      run: make all deb

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.1.1
      with: 
        name: asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
        path: target/packages/asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
        if-no-files-found: error

#  build_arm_ubuntu:
#    runs-on: ubuntu-latest
#    #strategy:
#      #matrix:
#        #container: [ 'arm64v8/ubuntu:bionic', 'arm64v8/ubuntu:focal' ]
#    #container:
#      #image: ${{ matrix.container }}
#      #options: "--entrypoint /bin/bash"
#    steps:
#      - name: Set up QEMU - arm
#        uses: docker/setup-qemu-action@v2.1.0
#        with:
#          image: tonistiigi/binfmt:latest
#          platforms: arm64
#      - name: Get Sources
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      #- name: Clone Source
#        #run: git clone --branch TOOLS-2226 https://github.com/aerospike/asmt.git
#
#      - name: install depebdencies
#        run: |
#         sudo apt-get update
#         sudo apt-get install make gcc libc6-dev zlib1g-dev
#         
#      - name: set env
#        run: |
#          echo "REV=$(make -f pkg/Makefile.deb print-REV)" >> $GITHUB_ENV
#          echo "OS=$(make -f pkg/Makefile.deb print-OS)" >> $GITHUB_ENV
#          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
#          echo "ARCH=$(make -f pkg/Makefile.deb print-ARCH)" >> $GITHUB_ENV
#
#      - name: build
#        run: |
#          pwd
#          make all deb
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
#          path: target/packages/asmt_${{ env.REV }}-1${{ env.OS }}_${{ env.ARCH }}.deb
#          if-no-files-found: error
#
#  build_job:
#    # The host should always be linux
#    runs-on: ubuntu-18.04
#    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
#
#    # Run steps on a matrix of 3 arch/distro combinations
#    strategy:
#      matrix:
#        include:
#          - arch: aarch64
#            distro: ubuntu20.04
#
#    steps:
#      - uses: actions/checkout@v2.1.0
#      - uses: uraimo/run-on-arch-action@v2
#        name: Build artifact
#        id: build
#        with:
#          arch: ${{ matrix.arch }}
#          distro: ${{ matrix.distro }}
#
#          # Not required, but speeds up builds
#            #githubToken: ${{ github.token }}
#
#          # Create an artifacts directory
#          setup: |
#            mkdir -p "${PWD}/artifacts"
#
#          # Mount the artifacts directory as /artifacts in the container
#          dockerRunArgs: |
#            --volume "${PWD}/artifacts:/artifacts"
#
#          # Pass some environment variables to the container
#          env: | # YAML, but pipe character is necessary
#            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
#
#          # The shell to run commands with in the container
#          shell: /bin/bash
#
#          # Install some dependencies in the container. This speeds up builds if
#          # you are also using githubToken. Any dependencies installed here will
#          # be part of the container image that gets cached, so subsequent
#          # builds don't have to re-install them. The image layer is cached
#          # publicly in your project's package repository, so it is vital that
#          # no secrets are present in the container state or logs.
#          install: |
#             apt-get update -q -y
#             apt-get install -q -y git gcc build-essential
#
#          # Produce a binary artifact and place it in the mounted volume
#          run: |
#            git config --global --add safe.directory /home/runner/work/asmt/asmt
#            echo "REV=$(make -f pkg/Makefile.deb print-REV)" >> $GITHUB_ENV
#            echo "OS=$(make -f pkg/Makefile.deb print-OS)" >> $GITHUB_ENV
#            echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
#            echo "ARCH=$(make -f pkg/Makefile.deb print-ARCH)" >> $GITHUB_ENV
#            #make all deb
#            #cp $(which git) "/artifacts/${artifact_name}"
#            echo "Produced artifact at /artifacts/${artifact_name}"
#
#      - name: Show the artifact
#        # Items placed in /artifacts in the container will be in
#        # ${PWD}/artifacts on the host.
#        run: |
#          ls -al "${PWD}/artifacts"
